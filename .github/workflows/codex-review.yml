name: Codex PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      ref:
        description: "Branch or tag to run against"
        required: false
        default: "main"

concurrency:
  group: codex-review-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  codex_review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout PR head (stable)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Checkout dispatch ref
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Build PR diff
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            def=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
            BASE=$(git merge-base "origin/${def}" HEAD)
            HEAD=$(git rev-parse HEAD)
          fi

          git diff --binary --no-color --src-prefix=a/ --dst-prefix=b/ "$BASE...$HEAD" | head -n 200000 > pr.diff

          echo "BASE=$BASE" >> "$GITHUB_ENV"
          echo "HEAD=$HEAD" >> "$GITHUB_ENV"

      - name: Invoke Codex via Netlify AI Gateway
        id: codex
        env:
          SITE_URL: ${{ secrets.SITE_URL }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -z "${SITE_URL:-}" ]]; then
            echo "SITE_URL secret not set. Add it under Settings → Secrets → Actions." >&2
            exit 1
          fi

          esc_diff=$(python3 - <<'PY'
import json
print(json.dumps(open("pr.diff","r",encoding="utf-8",errors="ignore").read()))
PY
)

          body=$(jq -n \
            --arg repo "${{ github.repository }}" \
            --arg pr "${{ github.event.pull_request.number || 'dispatch' }}" \
            --arg base "${BASE}" \
            --arg head "${HEAD}" \
            --arg title "${{ github.event.pull_request.title || '' }}" \
            --arg pbody "${{ github.event.pull_request.body || '' }}" \
            --argjson diff "$esc_diff" \
            '{repo:$repo, pr:$pr, base:$base, head:$head, title:$title, body:$pbody, diff:$diff, maxOutputTokens:600}')

          curl -sS -X POST "$SITE_URL/.netlify/functions/codex_review" \
            -H 'content-type: application/json' \
            --data "$body" > codex_review_findings.txt || {
              echo "⚠️ Netlify function call failed." > codex_review_findings.txt
            }

          {
            echo "final-message<<'EOF'"
            cat codex_review_findings.txt
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Upload findings artifact
        uses: actions/upload-artifact@v4
        with:
          name: codex_review_findings
          path: codex_review_findings.txt

      - name: Comment on PR with findings
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        env:
          CODEX_FINAL_MESSAGE: ${{ steps.codex.outputs.final-message }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: process.env.CODEX_FINAL_MESSAGE || "⚠️ Codex produced no message.",
            });

